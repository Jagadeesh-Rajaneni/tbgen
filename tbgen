#!/usr/bin/awk -f
# tbgen generate testbench from verilog module
# geopt function in public domain from arnold@gnu.org
# tbgen also is in public domain

BEGIN {
	# variables settable by -v
	if (!tbname)    tbname = "testbench"
	if (!vcdfile)   vcdfile = "testbench.vcd"
	if (!timescale) timescale = 1
	if (!duration)  duration = 100
	if (!step)      step = 1
	if (!module)    module = ""

	# internal variables
	nsteps = duration / step

	for (i = 1; i < ARGC; i++) {
		n = split(ARGV[i], a, ":")
		if (n == 2) {
			n = 3
			ARGV[3] = "1"
		}
		if (n != 3) {
			print "tbgen: improper input: " ARGV[i] >"/dev/stderr"
			error = 1
			exit 1
		}
		inputs[a[1]] = sprintf("%s;%s", a[2], (a[3]) ? a[3] : "1")
	}
	ARGC = 0

	srand()
}

function abs(n) {
	return n < 0 ? -n : n;
}

function getsizelen(sizestring, len, a) {
	if (!sizestring)
		return 1

	len = split(sizestring, a, "[]:[]")
	if (len == 3) {
		return a[2]
	} else if (len == 4) {
		return abs(a[2] - a[3] + 1)
	}
	print "tbgen: could not compute size of signal bus: " sizestring >"/dev/stderr"
	error = 1
	exit 1
}

function randombits(n, i) {
	printf "%s'b", n
	for (i = 0; i < n; i++) {
		if (rand() < 0.5)
			printf "0"
		else
			printf "1"
	}
}

function increasing(n, i) {
	if (reset) {
		Incmax = 1
		for (i = 0; i < n; i++)
			Incmax *= 2
		Incval = 0
		reset = 0
	}

	printf "%s'h%x", n, Incval
	Incval = (Incval + 1) % Incmax
}

function decreasing(n, i) {
	if (reset) {
		Incmax = 1
		for (i = 0; i < n; i++)
			Incmax *= 2
		Incval = Incmax - 1
		reset = 0
	}

	printf "%s'h%x", n, Incval
	if (!Incval)
		Incval = Incmax - 1
	else
		Incval = (Incval - 1) % Incmax
}

function header() {
	print "`timescale " timescale " ns / " timescale " ns"
	print ""
	print "module " tbname "();"
}

function signals(input, a) {
	for (i in inputs) {
		split(inputs[i], a, ";")
		printf "\treg %s %s;\n", a[2], a[1]
	}
	for (i in outputs) {
		split(outputs[i], a, ";")
		printf "\twire %s %s;\n", a[2], a[1]
	}
	print ""
}

function dut(i, a, n) {
	n = 0

	for (i in inputs) {
		split(inputs[i], s, ";")
		a[n++] = s[1]
	}
	for (i in outputs) {
		split(outputs[i], s, ";")
		a[n++] = s[1]
	}

	printf "\t%s dut(", module
	for (i = 0; i < n; i++)
		printf ".%s(%s)%s", a[i], a[i], (i == n - 1) ? "" : ", "
	printf ");\n\n"
}

function initial() {
	printf "\tinitial\n"
	printf "\tbegin\n"
	printf "\t\t$dumpfile(\"%s\");\n", vcdfile
	printf "\t\t$dumpvars(1, %s);\n", tbname
	printf "\t\t#%s $stop;\n", duration
	printf "\tend\n"
}

function geninput(input) {
	reset = 1

	split(input, a, ";")

	printf "\n"
	printf "\t/* %s */\n", a[1]
	printf "\tinitial\n"
	printf "\tbegin\n"

	if (a[3] == "r" || a[3] == "i" || a[3] == "d") {
		for (i = 0; i < nsteps / a[4]; i++) {
			printf "\t\t"
			if (i) {
				printf "#%s; ", step * a[4]
			}
			printf "%s = ", a[1]
			sizelen = getsizelen(a[2])
			if (a[3] == "r")            # generate inputs randomly
				randombits(sizelen)
			else if (a[3] == "i")
				increasing(sizelen)
			else if (a[3] == "d")
				decreasing(sizelen)

			printf ";\n"
		}
	} else {
		printf "\t\t%s = %s;\n", a[1], a[3]
	}

	printf "\tend\n"
}

function footer() {
	print "endmodule"
}

/^module/ {
	if (module == "") {
		split($0, a, "[ (]")
		module = a[2]
	}
}

/input/ {
	sub(".*input +(wire|reg)? *", "", $0)   # remove keywords from $0
	while (sub("[,\(\);]", "", $0))         # remove separators from $0
		;

	n = split($0, a)
	sizestring = ""
	for (i = 1; i <= n; i++) {
		if (match("\[[^:]*:?[^\]]*\]", a[i]))
			sizestring = a[i++]
		if (inputs[a[i]])
			inputs[a[i]] = sprintf("%s;%s;%s", a[i], sizestring, inputs[a[i]])
		else
			inputs[a[i]] = sprintf("%s;%s;%s;%s", a[i], sizestring, "r", 1)
	}
}

/output/ {
	sub(".*output +(wire|reg)? *", "", $0)   # remove keywords from $0
	while (sub("[,\(\);]", "", $0))         # remove separators from $0
		;

	n = split($0, a)
	sizestring = ""
	for (i = 1; i <= n; i++) {
		if (match("\[[^:]*:?[^\]]*\]", a[i]))
			sizestring = a[i++]
		outputs[a[i]] = sprintf("%s;%s", a[i], sizestring)
	}
}

/endmodule/ {
	exit
}

END {
	if (error)
		exit 1

	header()
	signals()
	dut()
	initial()
	for (i in inputs) {
		geninput(inputs[i])
	}
	footer()
}

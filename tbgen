#!/bin/sh
# tbgen: generate testbench from verilog module
# tbgen is in public domain

while getopts 'c:d:f:I:l:m:n:r:s:t:' c
do
	case "$c" in
	c)
		clock="$OPTARG"
		;;
	d)
		duration="$OPTARG"
		;;
	f)
		vcdfile="$OPTARG"
		;;
	I)
		incdir="$incdir:$OPTARG"
		;;
	l)
		dumplevel="$OPTARG"
		;;
	m)
		module="$OPTARG"
		;;
	n)
		tbname="$OPTARG"
		;;
	r)
		reset="$OPTARG"
		;;
	s)
		step="$OPTARG"
		;;
	t)
		timescale="${OPTARG%%[!0-9]*}"
		timeunit="${OPTARG##*[0-9]}"
		;;
	esac
done
shift $(( OPTIND - 1 ))

awk -v tbname="$tbname" \
    -v vcdfile="$vcdfile" \
    -v dumplevel="$dumplevel" \
    -v timeunit="$timeunit" \
    -v timescale="$timescale" \
    -v duration="$duration" \
    -v step="$step" \
    -v module="$module" \
    -v clock="$clock" \
    -v reset="$reset" \
    -v incdir="$incdir" \
'
BEGIN {
	# variables settable by -v
	if (!timeunit)  timeunit = "ns"
	if (!tbname)    tbname = "testbench"
	if (!vcdfile)   vcdfile = "simulation.vcd"
	if (!dumplevel) dumplevel = 1
	if (!timescale) timescale = 1
	if (!duration)  duration = 100
	if (!step)      step = 1
	if (!module)    module = ""
	if (!clock)     clock = "clk"
	if (!reset)     reset = "rst"
	if (!incdir)    incdir = ":"
	if (!dumphex)   dumphex = 1

	# internal variables
	progname = ARGV[0]
	nsteps = duration / step
	useclock = 0
	usereset = 0
	initialpause = 0

	for (i = 1; ARGV[i] ~ /^[A-Za-z_][A-Za-z0-9_]*:/ ; i++) {
		n = split(ARGV[i], a, ":")
		if (a[1] == "dump") {
			if (n != 3)
				err("invalid argument: " ARGV[i])
			dump[a[2]] = a[3]
		} else if (n == 2) {
			m = split(a[2], b, /,/)
			inputsize[a[1]] = m
			for (j = 1; j <= m; j++)
				inputvalue[a[1], j] = tonum(b[j])
			inputstep[a[1]] = 1
		} else if (n == 3) {
			m = split(a[2], b, /,/)
			inputsize[a[1]] = m
			for (j = 1; j <= m; j++)
				inputvalue[a[1], j] = tonum(b[j])
			inputstep[a[1]] = a[3]
		} else {
			err("invalid argument: " ARGV[i])
		}
		ARGV[i] = ""
	}
	if (i >= ARGC)          # no file names so force stdin
		ARGV[ARGC++] = "-"

	srand()
}

function tonum(n) {
	if (n ~ /h/)
		return htod(n)
	if (n ~ /b/)
		return btod(n)
	return n
}

function btod(b,    n, l, i, d) {
	l = length(b)
	for (i = 1; i <= l; i++) {
		d *= 2
		n = substr(b, i, 1)
		if (n == "1")
			d++
	}
	return d
}

function htod(h,    n, l, i, d) {
	l = length(h)
	for (i = 1; i <= l; i++) {
		d *= 16
		n = substr(h, i, 1)
		if (n ~ /[0-9]/)
			d += n
		else if (n == "a" || n == "A")
			d += 10
		else if (n == "b" || n == "B")
			d += 11
		else if (n == "c" || n == "C")
			d += 12
		else if (n == "d" || n == "D")
			d += 13
		else if (n == "e" || n == "E")
			d += 14
		else if (n == "f" || n == "F")
			d += 15
	}
	return d
}

function err(str) {
	printf "%s: %s\n", progname, str >"/dev/stderr"
	error = 1
	exit
}

function abs(n) {
	return n < 0 ? -n : n;
}

function callbc(str, res) {
	cmd = sprintf("echo %c%s%c | bc", 39, str, 39)
	cmd | getline res
	close(cmd)
	return res
}

function getsizestr(str, i, s, n, a, b) {
	for (i in parameters)
		gsub(i, parameters[i], str)
	gsub("[*][*]", "^", str)

	n = split(str, s, "[]:[]")
	if (n == 3) {
		a = callbc(s[2])
		return "[" a "]"
	} else {
		a = callbc(s[2])
		b = callbc(s[3])
		return "[" a ":" b "]"
	}
	err("could not compute size of signal bus: " sizestring)
}

function getsizelen(sizestring, len, a) {
	if (sizestring == " ")
		return 1

	len = split(sizestring, a, "[]:[]")
	if (len == 3) {
		return a[2]
	} else if (len == 4) {
		return abs(a[2] - a[3] + 1)
	}
	err("could not compute size of signal bus: " sizestring)
}

function randombits(n) {
	return int((n + 1) * rand())
}

function increasing(v, n,    i, max) {
	max = 1
	for (i = 0; i < n; i++)
		max *= 2
	return (v + 1) % max
}

function decreasing(v, n,    i, max) {
	max = 1
	for (i = 0; i < n; i++)
		max *= 2
	return (v - 1) % max
}

function header() {
	printf "`timescale %s %s / %s %s", timescale, timeunit, timescale, timeunit
	print ""
	print "module " tbname "();"
}

function signals(i) {
	if (usereset)
		printf "\treg %s;\n", reset
	if (useclock)
		printf "\treg %s;\n", clock
	for (i in inputs)
		printf "\treg %s %s;\n", inputs[i], i
	for (i in outputs)
		printf "\twire %s %s;\n", outputs[i], i
	print ""
}

function dut(i, a, n) {
	n = 0

	for (i in inputs)
		a[n++] = i
	for (i in outputs)
		a[n++] = i

	printf "\t%s dut(", module
	if (usereset)
		printf ".%s(%s)%s", reset, reset, (useclock || i) ? ", " : ""
	if (useclock)
		printf ".%s(%s)%s", clock, clock, (i) ? ", " : ""
	for (i = 0; i < n; i++)
		printf ".%s(%s)%s", a[i], a[i], (i == n - 1) ? "" : ", "
	printf ");\n\n"
}

function initial() {
	printf "\tinitial\n"
	printf "\tbegin\n"
	printf "\t\t$dumpfile(\"%s\");\n", vcdfile
	printf "\t\t$dumpvars(%d, %s);\n", dumplevel, tbname
	printf "\t\t#%s;\n", duration
	for (reg in dump)
		printf "\t\t$writemem%s(\"%s\", dut.%s);\n", (dumphex ? "h" : "b"), dump[reg], reg
	printf "\t\t$finish;\n"
	printf "\tend\n"
}

function genreset() {
	initialpause = 2

	printf "\n"
	printf "\t/* %s */\n", reset
	printf "\tinitial\n"
	printf "\tbegin\n"
	printf "\t\t%s = 1'"'"'b1;\n", reset
	printf "\t\t#2; %s = %s;\n", reset, "~" reset
	printf "\tend\n"
}

function genclock(    i, n) {
	n = 1
	printf "\n"
	printf "\t/* %s */\n", reset
	printf "\tinitial\n"
	printf "\tbegin\n"
	for (i = 0; i < nsteps; i++) {
		printf "\t\t"
		if (i)
			printf "#%d; ", step
		printf "%s = ", clock
		printf "1'"'"'b%x;\n", n
		n = !n
		printf ";\n"
	}
	printf "\tend\n"
}

function geninput(input, sizelen, prevval, val) {
	split(input, a, ";")

	printf "\n"
	printf "\t/* %s */\n", a[1]
	printf "\tinitial\n"
	printf "\tbegin\n"

	sizelen = getsizelen(inputs[input])
	j = 1
	prevval = 0
	for (i = initialpause; i < nsteps / inputstep[input]; i++) {
		printf "\t\t"
		if (i > initialpause)
			printf "#%s; ", step * inputstep[input]
		printf "%s = ", input
		if (inputvalue[input, j] == "r")
			val = randombits(sizelen)
		else if (inputvalue[input, j] == "i")
			val = increasing(prevval, sizelen)
		else if (inputvalue[input, j] == "d")
			val = decreasing(prevval, sizelen)
		else
			val = inputvalue[input, j]
		prevval = val
		printf "%s'"'"'h%x;\n", sizelen, val
		if (j < inputsize[input]) {
			j++
		}
	}
	printf "\tend\n"
}

function footer() {
	print "endmodule"
}

function parameter(str) {
	sub(".*parameter *", "", str)
	gsub("[,=;]", "", str)
	gsub("  *", " ", str)

	n = split(str, a)
	for (i = 1; i <= n; i++) {
		key = a[i]
		parameters[key] = a[++i]
	}
}

function define(str) {
	gsub("[ \t]+", " ", str)
	n = split(str, a)
	key = "`" a[2]
	for (i = 3; i <= n; i++) {
		parameters[key] = parameters[key] a[i]
	}
}

# remove single-line comments
{
	sub(/\/\/.*/, "")
	sub(/\/\*.*\*\//, "")
}

# remove multi-line comments
/\/\*/ {
	comment = 2
	sub(/\/\*.*/, "")
}

# remove multi-line comments
/\*\// {
	comment = 0
	sub(/.*\*\//, "")
}

# remove multi-line comments
comment {
	if (comment == 1)
		next
	else
		comment = 1
}

/`include/ {
	file = $2
	sub("^\"", "", file)
	sub("\"$", "", file)
	n = split(incdir, a, /:/)
	for (i = 1; i <= n; i++)
		if (((success = getline) <file) == 1)
			break
	while (success == 1) {
		gsub("/\\*.*\\*/", "", str)
		if ($1 == "parameter") {
			parameter($0)
		} else if ($1 == "`define") {
			define($0)
		}
		success = getline <file
	}
	close(file)
	next
}

$1 == "`define" {
	gsub("/\\*.*\\*/", "", str)
	define($0)
	next
}

/^module/ {
	if (module == "") {
		split($0, a, "[ (]")
		module = a[2]
	}
	next
}

/input/ {
	sub(".*input +(wire|reg)? +(unsigned|signed)? *", "", $0)   # remove keywords from $0
	gsub(/[,\(\);]/, " ", $0)               # remove separators from $0
	gsub(/]/, "] ", $0)

	$0 = $0
	sizestring = " "
	for (i = 1; i <= NF; i++) {
		if (match($i, "^[[].*")) {
			while (!match($i, ".*[]]")) {
				s = $(i++);
				$i = s $i;
			}
		}
		if (match($i, "\[[^:]*:?[^\]]*\]"))
			sizestring = getsizestr($(i++))
		if ($i == clock) {
			useclock = 1
			break;
		} else if ($i == reset) {
			usereset = 1
			break;
		}
		inputs[$i] = sizestring
		if (!inputvalue[$i, 1]) {
			inputvalue[$i, 1] = "r"
			inputsize[$i] = 1
		}
		if (!inputstep[$i])
			inputstep[$i] = 1
	}
	next
}

/output/ {
	sub(".*output +(wire|reg)? +(unsigned|signed)? *", "", $0)  # remove keywords from $0
	gsub(/[,\(\);]/, "", $0)                # remove separators from $0
	gsub(/]/, "] ", $0)

	$0 = $0
	sizestring = " "
	for (i = 1; i <= NF; i++) {
		if (match($i, "^[[].*")) {
			while (!match($i, ".*[]]")) {
				s = $(i++);
				$i = s $i;
			}
		}
		if (match($i, "\[[^:]*:?[^\]]*\]"))
			sizestring = getsizestr($(i++))
		outputs[$i] = sizestring
	}
	next
}

/parameter/ {
	parameter($0)
	next
}

/endmodule/ {
	exit
}

END {
	if (error)
		exit 1

	header()
	signals()
	dut()
	initial()
	if (usereset)
		genreset()
	if (useclock)
		genclock()
	for (input in inputs)
		geninput(input)
	footer()
}
' "$@"
